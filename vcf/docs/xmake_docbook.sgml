<?xml version="1.0"?>


<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                    "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" >

<!--
Copyright (c) 2000-2003, Jim Crafton
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
	Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.

	Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in 
	the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NB: This software will not save the world.
CVS Log info
$Log$
Revision 1.1.2.1  2003/03/12 03:09:08  ddiego
switched all member variable that used the "m_"<name> prefix to
 <name>"_" suffix nameing standard.
Also changed all vcf builder files to accomadate this.
Changes were made to the Stream classes to NOT multiple inheritance and to
be a little more correct. Changes include breaking the FileStream into two
distinct classes, one for input and one for output.

Revision 1.1.2.2  2003/03/03 05:00:41  ddiego
added Makefile for creating html, htmlhelp, a tar.gz dist, and cleaning up

Revision 1.1.2.1  2003/03/03 03:39:49  ddiego
initial check-in of docbook vcf documentation, plus neccesary stylsheets
and images

-->


<book>
	<title>XMake documentation</title>
	<titleabbrev>XMake</titleabbrev>

	<bookinfo>
		<legalnotice>
			<para>
			Copyright (c) 2000-2003, Jim Crafton
			</para>
			<para>
			All rights reserved.
			</para>
			<para>
			Redistribution and use in source and binary forms, with or without
			modification, are permitted provided that the following conditions
			are met:
				<itemizedlist>
					<listitem>
						<para>
						Redistributions of source code must retain the 
						above copyright notice, this list of conditions 
						and the following disclaimer.
						</para>
					</listitem>	
					<listitem>
						<para>
						Redistributions in binary form must reproduce 
						the above copyright notice, this list of conditions 
						and the following disclaimer in the documentation 
						and/or other materials provided with the distribution.
						</para>
					</listitem>	
				</itemizedlist>
			</para>
			<para>
			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
			CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
			INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
			MERCHANTABILITY AND FITNESS FOR	A PARTICULAR PURPOSE ARE 
			DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE 
			LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
			OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
			PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
			DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
			AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
			LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
			IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
			THE POSSIBILITY OF SUCH DAMAGE.
			</para>
			<para>
			NB: This software will not save the world.
			</para>
		</legalnotice>
		<author>
			<firstname>Jim</firstname>
			<surname>Crafton</surname>
		</author>
		<copyright>
			<year>2000</year>
			<year>2001</year>
			<year>2002</year>
			<year>2003</year>
			<holder>Jim Crafton, VCF Project</holder>
		</copyright>
	</bookinfo>
	<preface><title>Introduction</title>
		<para>
		So why another build tool ? Well that's a great question now isn't it
        ! Basically I hate make files, and the whole make file syntax. I find it
        incredibly difficult to read, it is error prone to edit, and just seems
        to me to be incredibly messy. Obviously I am not alone in this feeling,
        since there are a number of projects out there to create alternatives to
        make (Ant for Java, and Jam, come to mind immediately).
		</para>
		
		<para>
		So, since the VCF is now building on linux/Unix systems (so far the
        FoundationKit has been built on linux and Solaris, the GraphicsKit and 
		ApplicationKit on linux in X11 ), it was thought it sure would be nice to 
		have a single build file that could be used on any system for GCC, VC++, 
		etc. Since XML syntax is easy to read (compared to a traditional make file), 
		and the scope of the program would be fairly limited, i.e. it is designed 
		to compiled and link C++ programs, and not a whole lot more, I thought it 
		was worth the effort to try and write a make like program that would 
		accept this new syntax. As it turned out it wasn't very hard, and maybe a 
		couple of days of programming time (plus probably a week of testing) has
        gone into writing xmake so I think it is worth it .
		</para>

        <para>
		Another reason to write xmake was the desire to be able to have other
        developers quickly be able to build the framework, even on system that
        do not have good IDE's. I felt that it is a LOT easier to explain a
        simple set of XML tags to developers with a background in VC++ and GUI
        IDE's than trying to struggle to explain makefiles.
		</para>

        <para>
		Xmake works quite well and I have been regularly using it to
        build the VCF on linux as I work on porting it. This includes building
        the FoundationKit, GraphicsKit, and ApplicationKit as a shared library 
		and the various test projects used to test the various parts of the port.
		</para>

        <para>
		In addition to a command line tool, the xmake engine will become the 
		underlying build tool for the VCFBuilder, so VCFBuilder workspaces/projects 
		will share the same XML syntax as xmake does (though the VCFBuilder will 
		include a number of extra tags that will simply be ignored by the xmake
		engine).
		</para>
	</preface>

	<chapter><title>Basic Usage</title>
		<section><title>How it works</title>
			<para>
			Xmake is designed to work on one or more projects. A project
			generally results in the output of a single binary, such as an
			executable (.exe) or a library (.lib) or a dynamic library (.dll or .so
			depending on your system). Within in a project, you can specify one or
			more configurations to build. For example, you could have a project
			build a "Debug GCC" and a "Debug VC++" and a "Debug BCC" (please note 
			you can call the configuration anything you want), that would build a 
			binary file using different compilers and linkers depending on the 
			configuration. Configurations hold most of the key settings for the 
			compiler and linker, as well as	allowing you to specify additional build 
			tools for specials file types (such as a resource compiler for .RC files 
			on Win32 systems). Thus when using xmake you tell it to build a specific 
			configuration for a
			given project in a make file (usually makefile.xml).  xmake is smart
			enough to automatically check file dependencies for you, so if you have
			recently modified a header that two of the five source files in your
			project depend on, it will only build the two affected source files.
			</para>

			<para>
			Projects also hold a list of one or more source files that are
			necessary to build the project. These source files hold information such
			as the file name (the exact path is determined dynamically, relative to
			the path where is xmake is invoked), the output name, whether or not the
			file should be built (this can be useful, to allow you to turn
			"off" certain files ), and finally the configuration the
			source belongs to. Source files may belong to one or more
			configurations, with each configuration name separated by a
			"|" character (for example, "Debug GCC|Debug
			VC++") .
			</para>
		</section>

		<section><title>Command Line Parameters</title>
		<para>The command line usage is :</para>

        <para>xmake [projectName] -config configurationName [-f makefileName]
        || [-install] || [-clean]</para>

        <para>You can invoke the  xmake program from the command line. You control

        the program by the following options :
		</para>
		<para>
			<itemizedlist>
				<listitem>
					-projectName - is the name of the project to build in this
					makefile. If left blank then the first project found is the one that is
					built.
				</listitem>

				<listitem>
					-config configurationName - this tells the  xmake program which
					configuration to build. The  -config option must
					be followed by a
					configuration name so  xmake knows what to build. Specify the wrong
					name and you will not build what you expected.
				</listitem>
				<listitem>
					-f makefileName -  the makefile to use. If this is not specified 
					then xmake looks for a file named "makefile.xml" in the current 
					directory. If this is not found then an error results and 
					xmake exits.
				</listitem>

				<listitem>
					-install - currently unimplemented
				</listitem>

				<listitem>
				-clean - removes all binary files produced by the
				</listitem>

				<listitem>
					make file for the specified configuration
				</listitem>
        </itemizedlist>
		</para>

        <para>
		An example of it's usage, for example to build the FoundationKit for
        the VCF in linux using GCC, is this:
			<screen>xmake -config "GCC Debug"</screen>
		</para>
        
		</section>
	</chapter>

	<chapter><title>XMake Syntax</title>
		<section><title>XML Based</title>
			<para>
			Since the xmake makefile is based on XML it follows all XML syntax
			rules. Please note that if you need to have double quotes in a value,
			use the single quote, which will then be replaced with a double quote
			during the build process.
			</para>
		</section>
		<section><title>The &lt;make&gt; tag</title>
			<para>
			This is the outermost tag. Every  xmake makefile 
			must begin and end with this tag.
			</para>
		</section>

		<section><title>The &lt;substitutions&gt; tag</title>
			<para>
			This is where you can specify variable names that will be substituted
			when the make file is parsed and executed by xmake. For example you can
			specify a common include path, or a common output folder. Inside of a substitutions
			tag you can have zero or more variable tags that have 2 attributes, a
			name and a value. The name attribute is the name of the variable as it
			will be referenced throughout the make file, and the value attribute
			specifies the string that will be substituted wherever the parser
			encounters the variable. System environment variables may also be used,
			so if you have defined VCF_INCLUDE as one of your
			system's environment variables, then the parser is smart enough to
			attempt to try and check to see if the variable exists.
			</para>
			<para>
			To reference the variable you do so as follows:
				<itemizedlist>
					<listitem>$( &lt; variable name), for example if you have defined a
						variable called MyIncludePath, then you would reference it $(MyIncludePath)
					</listitem>
					<listitem>%&lt;variable name&gt;%, for example if you have defined a
						variable called MyIncludePath, then you would reference it %MyIncludePath%
					</listitem>
				</itemizedlist>
			</para>
			<para>
				An example of this tag section looks like this:
				<programlisting>
				<![CDATA[
<substitutions>
<variable name="VCF_INCLUDE" value="e:\code\vcf\include"/>
<variable name="INC" value="../../../include"/>
<variable name="SRC value="../../../src"/>
</substitutions>
				]]>
				</programlisting>
				<note>
					<para> Variables can be used anywhere you are
					specifying a value for a attribute.
					</para>
				</note>			
			</para>
		</section>

		<section><title>The &lt;project&gt; tag</title>
			<para>
			The project holds all the important nodes. It also has a series of
			attributes, as follows:
			<itemizedlist>
				<listitem>
					<symbol>name</symbol> - the name of the project. This is required.
				</listitem>

				<listitem>
					<symbol>path</symbol> - the path of the project. This is optional
					right now and doesn't do much...
				</listitem>

				<listitem>
					<symbol>outputAs</symbol> - the output path of the project. This is
					used to determine the binary that represents a successful build of
					the project, and is used when your "clean" your project to
					specify the binary to get rid of. For example it could be 
					"FooBar.exe", or "MyLib.dll", or 
					"MySharedCode.so".
				</listitem>

				<listitem>
					<symbol>externalFileName</symbol> - this specifies an external xmake
					makefile to build and will cause a new xmake process to be started.
					If this is used then no other attributes are necessary (other than
					the name attribute). a relative or absolute path may be used to
					specify the makefile. All relevant arguments passed to the currently
					executing xmake process are passed to the new xmake process that
					will get started as a result. So if you called xmake like so:
					<screen>
xmake -config "GCC Debug" -v -clean
					</screen>
					then the new process that gets started will also use the 
					<symbol>"-config "GCC Debug" -v -clean"</symbol> arguments.
				</listitem>
			</itemizedlist>
			<note>
				<para>
				Note that the <symbol>outputAs</symbol> attribute is optional. 
				With most compilers/linkers you can specify where the binary 
				output will go. However, as mentioned above, the output 
				name is used so that xmake can do a complete 
				"clean" of the project.
				</para>
			</note>
			</para>			
		</section>

		<section><title>The &lt;dependencies&gt; tag</title>
			<para>
			The dependencies sections allows you indicate, at the project level, 
			what other projects need to be built first before the project that 
			we are currently specifying. The &lt;dependencies&gt; tag has 0 or more 
			&lt;dependency&gt; sub tags. If your project has no dependencies at all, 
			then you can omit the &lt;dependencies&gt; all together.		
			</para>

			<section><title>The &lt;dependency&gt; tag</title>
				<para>
				This tag indicates a particular project that must be built prior to 
				building the parent project that is a part of. A dependency has the 
				following attributes:
				<itemizedlist>
					<listitem>
						<symbol>name</symbol> - The name of the project that needs 
						to be built first
					</listitem>
				</itemizedlist>
				</para>

				<para>
				An example might look like this:
				<programlisting>
				<![CDATA[
<project name="foo">
	<dependencies>
		<dependency name="libFoo"/>	
	</dependencies>
</project>

<project name="libFoo">
	<dependencies>
		<dependency name="libBar"/>	
	</dependencies>	
</project>

<project name="libBar">
</project>
				]]>
				</programlisting>
				</para>
				<para>
				This gets resolved to project "foo" depends on project "libFoo"
				which in turn depends on project "libBar", so the build order becomes
				libBar, libFoo, and finally foo.
				</para>
			</section>
			
			<section><title>The &lt;configurations&gt; tag</title>
			<para>
				Configurations are the heart of xmake. If you have used Microsoft's 
				Visual C++ then you'll be right at home here. Basically a configuration 
				is a complete set of settings for compiler and linker in order to build 
				the project. A single project may have multiple configurations, for 
				example you might have a "Win32 Debug", "Win32 Release", "Linux Debug", 
				"Linux Release", "Mac Debug", and "Mac Release". Thus, in order for 
				xmake to do it's job it needs to know the configuration you want to 
				build. The <configurations> tag is used to indicate the collection, 
				and then a series of 1 or more <config> sub tags for each configuration. 
				A configuration has the following attributes:
				<itemizedlist>
					<listitem>
						<symbol>name</symbol> - The configuration name identifies the 
						configuration, and is used by source files to identify which 
						configuration they belong to. A configuration name can only 
						have the characters [a..z, A..Z, 0..9] the "|" is used to 
						separate multiple configurations.
					</listitem>

					<listitem>
						<symbol>srcBinaryExt</symbol> - the srcBinaryExt is used to 
						identify the extension of compiled source files. Many compilers 
						use ".o" while many others use ".obj". For example, GCC/G++ uses 
						".o" for it's extension for object files, while VC++ uses ".obj". 
						This allows you to specify just the name of your output files 
						(without the "." extension) and let xmake append the correct 
						extension based on the configuration currently being built.  
					</listitem>
				</itemizedlist>
			</para>
		</section>			
		</section>

		<section><title></title>
			<para>
			
			</para>
		</section>

		<section><title></title>
			<para>
			
			</para>
		</section>

		<section><title></title>
			<para>
			
			</para>
		</section>

		<section><title></title>
			<para>
			
			</para>
		</section>

		<section><title></title>
			<para>
			
			</para>
		</section>
	</chapter>	

	<chapter><title>FAQ</title>
		<qandaset>
			<qandaentry>
				<question>
					<para>Duh ?</para>
				</question>
				<answer>
					<para>
					Stuff
					</para>
				</answer>			
			</qandaentry>
		</qandaset>	
	</chapter>	
	
	<chapter><title>Credits</title>
		<section>
			<para>
			The VCF would like to thank the following people for contributing time and effort to xmake:
			<simplelist>							
				<member>Cesar Mello</member>				
			</simplelist>
			If we missed someone please let us know about it!
			</para>
		</section>
	</chapter>	
	
	<index id="index"/>
</book>


