#if     _MSC_VER > 1000
#pragma once
#endif

/**
*CVS Log info
*$Log$
*Revision 1.1.2.1  2004/04/28 00:28:19  ddiego
*migration towards new directory structure
*
*Revision 1.12.4.1  2004/04/26 21:58:21  marcelloptr
*changes for dir reorganization: _VCF_MACRO_H__
*
*Revision 1.12  2003/12/18 05:15:57  ddiego
*merge from devmain-0-6-2 branch into the stable branch
*
*Revision 1.11.6.1  2003/09/12 00:09:32  ddiego
*added better tabbing behaviour - fixed an earlier bug.
*Code is easier to understand and it simplified the implementation
*a bit as well
*Moved around the RTTI definitions for various Appkit classes to a
*single inline and stripped them from the various class headers
*
*Revision 1.11  2003/02/26 04:30:38  ddiego
*merge of code in the devmain-0-5-9 branch into the current tree.
*most additions are in the area of the current linux port, but the major
*addition to this release is the addition of a Condition class (currently
*still under development) and the change over to using the Delegate class
*exclusively from the older event handler macros.
*
*Revision 1.10.14.1  2002/12/25 22:38:00  ddiego
*more stupid fixes to get rid of the damn gcc no newline warning...grrr...
*
*Revision 1.10  2002/05/09 03:10:42  ddiego
*merged over code from development branch devmain-0-5-1a into the main CVS trunk
*
*Revision 1.9.4.1  2002/04/27 15:43:07  ddiego
*removed ApplicationKit.h and optimized header includes as
*well as adding better include guard support
*
*Revision 1.9  2002/03/01 01:02:37  ddiego
*fixes bug [ 524006 ] TreeListControl crash
*makes some changes to model classes to utilize event types better
*
*Revision 1.8  2002/01/24 01:46:47  ddiego
*added a cvs "log" comment to the top of all files in vcf/src and vcf/include
*to facilitate change tracking
*
*/

/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */



#ifndef _VCF_TREEMODEL_H__
#define _VCF_TREEMODEL_H__


namespace VCF{

class TreeItem;

class TreeModelListener;


#define TREEMODEL_CLASSID		"3126B225-2819-11d4-B53A-00C04F0196DA"

/**
*
*/
class APPKIT_API TreeModel : public Model {
public:
	

	TreeModel(){
		
	};

	virtual ~TreeModel(){};


	enum TreeModelEvents {
		TREEITEM_ADDED = Model::MODEL_LAST_EVENT + 2000,
		TREEITEM_DELETED
	};


    virtual Enumerator<TreeItem*>* getRootItems() = 0;

	virtual void addTreeRootNodeChangedHandler( EventHandler* handler ) = 0;

	virtual void removeTreeRootNodeChangedHandler( EventHandler* handler ) = 0;

	virtual void addTreeNodeAddedHandler( EventHandler* handler ) = 0;

	virtual void removeTreeNodeAddedHandler( EventHandler* handler ) = 0;

	virtual void addTreeNodeDeletedHandler( EventHandler* handler ) = 0;

	virtual void removeTreeNodeDeletedHandler( EventHandler* handler ) = 0;

    virtual void insertNodeItem( TreeItem * node, TreeItem * nodeToInsertAfter ) = 0;


    virtual void deleteNodeItem( TreeItem * nodeToDelete ) = 0;

    virtual void addNodeItem( TreeItem * node, TreeItem * nodeParent=NULL ) = 0;

    virtual void sort() = 0;
};

};

#endif // _VCF_TREEMODEL_H__


